% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/md_.R, R/md_.bibentry.R,
%   R/md_.pairwise.htest.R, R/md_.patchwork.R, R/md_plot.R, R/md_print.R
\name{md_}
\alias{md_}
\alias{md_.data.frame}
\alias{md_.xtabs}
\alias{md_.matrix}
\alias{md_.list}
\alias{md_.numeric}
\alias{md_.character}
\alias{md_.noquote}
\alias{md_.bibentry}
\alias{md_.pairwise.htest}
\alias{md_.patchwork}
\alias{md_.trellis}
\alias{md_.consort}
\alias{md_.flextable}
\alias{md_.htmlwidget}
\alias{md_.gg}
\alias{md_.S7_object}
\alias{md_.htest}
\alias{md_.power.htest}
\alias{md_.magick-image}
\title{Markdown Script}
\usage{
md_(x, ...)

\method{md_}{data.frame}(x, xnm, ...)

\method{md_}{xtabs}(x, xnm, ...)

\method{md_}{matrix}(x, xnm, ...)

\method{md_}{list}(x, xnm, ...)

\method{md_}{numeric}(x, ...)

\method{md_}{character}(x, ...)

\method{md_}{noquote}(x, xnm, ...)

\method{md_}{bibentry}(x, ...)

\method{md_}{pairwise.htest}(x, xnm, ...)

\method{md_}{patchwork}(x, xnm, ncol = 2L, ...)

\method{md_}{trellis}(x, xnm, ...)

\method{md_}{consort}(x, xnm, ...)

\method{md_}{flextable}(x, xnm, ...)

\method{md_}{htmlwidget}(x, xnm, ...)

\method{md_}{gg}(x, xnm, ...)

\method{md_}{S7_object}(x, xnm, ...)

\method{md_}{htest}(x, xnm, ...)

\method{md_}{power.htest}(x, xnm, ...)

\method{md_}{`magick-image`}(x, xnm, ...)
}
\arguments{
\item{x}{see \strong{Usage}}

\item{...}{additional parameters, currently not in use}

\item{xnm}{..}

\item{ncol}{\link[base]{integer} scalar for function \code{\link[=md_.patchwork]{md_.patchwork()}}, see function \link[patchwork]{plot_layout}}
}
\value{
Function \code{\link[=md_]{md_()}} returns a \link[base]{character} scalar or \link[base]{vector}.
}
\description{
To create markdown script for various objects.
}
\note{
As for now (early 2025), tzh prefers package \pkg{patchwork} over
function \code{ggpubr::ggarrange}.

Read \url{https://plotly.com/r/subplots/}
on how to stack \code{'plotly'} objects
(via function \link[plotly]{subplot}).
}
\examples{
list('`data.frame`' = Formaldehyde) |> render_(file = 'data.frame')

list('`xtabs`' = xtabs(~ cyl + vs, data = mtcars)) |> render_(file = 'xtabs')

list('`matrix`' = VADeaths) |> render_(file = 'matrix')

list(
 stringi = 'String manipulation by <u>**`R`**</u> package <u>**`stringi`**</u>.',
 texreg = 'R regression output to LaTeX or HTML by <u>**`R`**</u> package <u>**`texreg`**</u>.',
 stats = 'Linear regression by <u>**`R`**</u> package <u>**`stats`**</u>.'
) |> render_(file = 'bibentry')

list(
  '`pairwise.htest`' = airquality |> 
    within.data.frame(expr = {
      Month = factor(Month, labels = month.abb[5:9])
    }) |>
    with(expr = pairwise.t.test(Ozone, Month, pool.sd = FALSE, p.adj = 'none'))
) |> render_(file = 'pairwise.htest')

library(patchwork)
# ?patchwork::`patchwork-package`
library(ggplot2)
p1 = ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 = ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
list(
 '`patchwork`' = p1 + p2
) |> render_(file = 'patchwork')

library(lattice); Depth = equal.count(quakes$depth, number=8, overlap=.1)
library(consort); data(dispos.data)
list(
 '`trellis`' = xyplot(lat ~ long | Depth, data = quakes),
 '`consort`' = consort_plot(
  data = dispos.data |> subset(subset = !(arm3 \%in\% 'Trt C')),
  orders = list(c(trialno = 'Population'), c(exclusion = 'Excluded'), c(arm = 'Randomized')),
  side_box = c('exclusion'))
) |> render_(file = 'Vanilla Plot')

library(ggplot2)
library(leaflet)
washingtonDC = leaflet() |>
  addTiles() |>
  fitBounds(lat1 = 38.85, lat2 = 38.92, lng1 = -77.07, lng2 = -77.0) |>
  addPopups(
    lng = c(-77.0365, -77.0563), lat = c(38.8977, 38.8719), 
    popup = c('white house', 'pentagon')
  )

list(
 '`htest`' = t.test(mpg ~ am, data = mtcars),
 '`power.htest`' = power.t.test(power = .90, delta = 1),
 '`ggplot2::ggplot`' = ggplot() + geom_point(data = mtcars, mapping = aes(wt, mpg)),
 '`GGally::ggmatrix`, an `S7_object`' = GGally::ggpairs(swiss, columns = c(1:2, 6)),
 '`flextable::flextable`' = Formaldehyde |> flextable::flextable(),
 '`magick-image` from package `magick`' = magick::wizard,
 '`reactable::reactable`, an `htmlwidget`' = Formaldehyde |> reactable::reactable(),
 '`leaflet::leaflet`, an `htmlwidget`' = washingtonDC,
 '`htmlwidget`' = list(
   plotly::plot_ly(ggplot2::economics, x = ~date, y = ~pop, type = 'scatter', mode = 'markers'),
   plotly::plot_ly(z = ~volcano, type = "surface")
 )
) |> render_(file = 'Do Not (Need to) Say Print')

}
\keyword{internal}
